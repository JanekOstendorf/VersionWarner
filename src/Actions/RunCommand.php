<?php declare(strict_types=1);
/**
 * @author Janek Ostendorf <janek@ostendorf-vechta.de>
 */

namespace ozzyfant\VersionWarner\Actions;

use Knp\Command\Command;
use ozzyfant\VersionWarner\Entities\Recipient;
use ozzyfant\VersionWarner\Entities\VersionCheck;
use ozzyfant\VersionWarner\Version;
use ozzyfant\VersionWarner\VersionWarner;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class RunCommand extends Command
{
    /**
     * @var VersionWarner
     */
    private $app;

    /**
     * RunCommand constructor.
     * @param VersionWarner $app
     */
    public function __construct(VersionWarner $app)
    {
        parent::__construct();
        $this->app = $app;
    }

    protected function configure(): void
    {
        parent::configure(); // TODO: Change the autogenerated stub
        $this->setName('run')
            ->setDescription('Runs all checks and sends notifications.')
            ->setHelp('Use this command for your cron job to run the checks automatically.');
    }

    protected function execute(InputInterface $input, OutputInterface $output): void
    {
        // Get all enabled checks and run them
        /** @var VersionCheck[] $versionChecks */
        $versionChecks = $this->app->getEm()->getRepository(VersionCheck::class)->findBy(['enabled' => true]);

        foreach ($versionChecks as $versionCheck) {
            $this->app->getLogger()->debug('Processing Check', ['check' => $versionCheck->getName()]);

            $versionCheck->initProvider();

            if ($versionCheck->checkRunInterval()) {
                $versionCheck->runCheck();
                $this->app->getEm()->persist($versionCheck);

                // Get enabled recipients for this check
                $recipients = $versionCheck->getRecipients()->filter(function (Recipient $entry) {
                    return $entry->isEnabled();
                });

                echo "sending notifications to\n";
                foreach ($recipients as $recipient) {
                    echo $recipient->getName() . "\n";
                }
            } else {
                $this->app->getLogger()->info('Not running check again, because of minimum check interval.', ['check' => $versionCheck->getName()]);
            }


        }

        // Fetch all Recipients
        /**
         * @var Recipient[] $recipients
         */
        $recipients = $this->app->getEm()->getRepository(Recipient::class)->findBy(['enabled' => true]);

        foreach ($recipients as $recipient) {
            //var_dump($recipient->getName());
        }

        $this->app->getEm()->flush();

    }

}